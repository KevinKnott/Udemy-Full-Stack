In order to use React we will start by using codesandbox.io

To begin we need to:
Import React from "React";
Import ReactDOM from "React-dom";

This allows us to use React.

Also please note that Babel is used as a way to write our code in all the possible versions so that all browsers can handle the JSX.

Once that is done we can use ReactDom to help re render HTML:

//Create a react app from scratch.

ReactDOM takes two things:
    1. What to place (Please note you can only add one thing)
    2. Where to place it

ReactDOM.render(
  <div>
    <h1>My Favourite Foods</h1>
    <ul>
      <li>Steak</li>
      <li>Nachos</li>
      <li>Chicken</li>
    </ul>
  </div>,
  document.getElementById("root")
);
//It should display a h1 heading.
//It should display an unordered list (bullet points).
//It should contain 3 list elements.


In order to use JavaScript within React JSX we need to use {} to wrap the variable/expressions we need to use

const fname = "Kevin";
const lname = "Knott";
var number = Math.random() * 100;
number = Math.floor(number) + 1;

ReactDOM.render(
  <div>
    <h1>
      Hello {fname} {lname}!
    </h1>
    <p>Your lucky number is {number}</p>
  </div>,
  document.getElementById("root")
);


Another example here:

//Create a react app from scratch.
import React from "react";
import ReactDOM from "react-dom";

const year = new Date().getFullYear();
const fname = "Kevin";
const lname = "Knott";

//It should display 2 paragraph HTML elements.
ReactDOM.render(
  <div>
    <p>Created by {fname + " " + lname}</p>
    <p>Copyright {year}</p>
  </div>,
  document.getElementById("root")
);

//The paragraphs should say:
//Created by YOURNAME.
//Copyright CURRENTYEAR.
//E.g.
//Created by Angela Yu.
//Copyright 2019.


How to Style React:

You can use basic styling from CSS however JSX handles all global attributes by using specific casing:

class => className
contenteditable => contentEditable

ReactDOM.render(
  <div>
    <h1 className="heading" contentEditable="True" spellCheck="false">
      My Favourite Foods
    </h1>
    <div>
      <img
        className="ourImages"
        src={
          "https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Made20bacon.png/220px-Made20bacon.png"
        }
        alt="bacon"
      />
      <img
        className="ourImages"
        src={"https://i5.walmartimages.ca/images/Enlarge/580/6_r/875806_R.jpg"}
        alt=" banana"
      />
      <img
        className="ourImages"
        src={
          "https://upload.wikimedia.org/wikipedia/commons/f/f1/2ChocolateChipCookies.jpg"
        }
        alt="cookie"
      />
    </div>
  </div>,
  document.getElementById("root")
);

So in our CSS we can change normal styles like shown below
.heading {
  color: red;
}

.ourImages {
  height: 100px;
  width: 100px;
}


You can also change styles using inline style, this gives us an adavantage as we can update the object on the fly

const customStyle = {
  color: "red",
  fontSize: "20px",
  border: "1px solid black"
};

customStyle.color = "pink";

ReactDOM.render(
  <h1 style={customStyle}>Hello World!</h1>,
  document.getElementById("root")
);


More practice:

let greeting;
const currentHour = new Date().getHours();
const ourStyle = { color: "" };
console.log(currentHour);

//Show a single h1 that says "Good morning" if between midnight and 12PM.
if (currentHour >= 0 && currentHour < 12) {
  greeting = "Good morning";
  ourStyle.color = "red";
}
//or "Good Afternoon" if between 12PM and 6PM.
else if (currentHour >= 12 && currentHour < 18) {
  greeting = "Good afternoon";
  ourStyle.color = "green";
}
//or "Good evening" if between 6PM and midnight.
else {
  greeting = "Good evening";
  ourStyle.color = "red";
}

//Apply the "heading" style in the styles.css
//Dynamically change the color of the h1 using inline css styles.
//Morning = red, Afternoon = green, Night = blue.

ReactDOM.render(
  <div>
    <h1 className="heading" style={ourStyle}>
      {greeting}
    </h1>
  </div>,
  document.getElementById("root")
);


Components!

Up to now we have been adding everything directly to the index.js which is not best practice. You want to create components that are self contained that you import so that your index.js 
is super simple

index.js:
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";

ReactDOM.render(<App />, document.getElementById("root"));

Heading:
import React from "react";

function Heading() {
  return <h1>My Favourite Foods</h1>;
}

export default Heading;

List:
import React from "react";

function List() {
  return (
    <ul>
      <li>Bacon</li>
      <li>Jamon</li>
      <li>Noodles</li>
    </ul>
  );
}

export default List;

App:
import React from "react";
import Heading from "./Heading";
import List from "./List";

function App() {
  return (
    <div>
      <Heading />
      <List />
    </div>
  );
}

export default App;


As you can see by creating a self contained JSX file we can add in components and export functions that return JSX. Please note you can run any specialized
JS within these files or by using JS files and importing them.

React Props:

You can pass information to a component using properties. To use them you would add an attribute and give them a value.
Once they are passed you can access them through the props object. See below for an example

function Card(props) {
  console.log(props);
  return (
    <div>
      <h2>{props.name}</h2>
      <img src={props.img} alt="avatar_img" />
      <p>{props.tel}</p>
      <p>{props.email}</p>
    </div>
  );
}
ReactDOM.render(
  <div>
    <h1>My Contacts</h1>

    <Card
      // Cant use className here
      name="Beyonce"
      img="https://blackhistorywall.files.wordpress.com/2010/02/picture-device-independent-bitmap-119.jpg"
      tel="+123 456 789"
      email="b@beyonce.com"
    />
    <Card
      name="Jack Bauer"
      img="https://pbs.twimg.com/profile_images/625247595825246208/X3XLea04_400x400.jpg"
      tel="+987 654 321"
      email="jack@nowhere.com"
    />
    <Card
      name="Chuck Norris"
      img="https://i.pinimg.com/originals/e3/94/47/e39447de921955826b1e498ccf9a39af.png"
      tel="+918 372 574"
      email="gmail@chucknorris.com"
    />
  </div>,
  document.getElementById("root")
);

Map function

It is basically a foreach loop that lets you pass info from a object to map to a function to handle events
Please note that you have to have a unique key for every element used within MAP to follow reacts rules 
Key is special and shouldn't be accessed unless you create another prop name for it

import React from "react";
import Card from "./Card";
import contacts from "../contacts";

function createCard(contact) {
  return (
    <Card
      id={contact.id}
      key={contact.id}
      name={contact.name}
      img={contact.imgURL}
      tel={contact.phone}
      email={contact.email}
    />
  );
}

function App() {
  return (
    <div>
      <h1 className="heading">My Contacts</h1>
      {contacts.map(createCard)}

    </div>
  );
}

export default App;


import React from "react";
import Avatar from "./Avatar";
import Detail from "./Detail";

function Card(props) {
  return (
    <div className="card">
      <div className="top">
        <p>{props.id}</p>
        <h2 className="name">{props.name}</h2>
        <Avatar img={props.img} />
      </div>
      <div className="bottom">
        <Detail detailInfo={props.tel} />
        <Detail detailInfo={props.email} />
      </div>
    </div>
  );
}

export default Card;

Another Example:
import React from "react";
import Entry from "./Entry";
import emojis from "../emojipedia";

function createEntry(emoji) {
  return (
    <Entry
      key={emoji.id}
      emoji={emoji.emoji}
      name={emoji.name}
      meaning={emoji.meaning}
    />
  );
}

function App() {
  return (
    <div>
      <h1>
        <span>emojipedia</span>
      </h1>

      {emojis.map(createEntry)}
    </div>
  );
}

export default App;

import React from "react";

function Entry(props) {
  return (
    <dl className="dictionary">
      <div className="term">
        <dt>
          <span className="emoji" role="img" aria-label={props.name}>
            {props.emoji}
          </span>
          <span>{props.name}</span>
        </dt>
        <dd>{props.meaning}</dd>
      </div>
    </dl>
  );
}

export default Entry;

Map/Filter/Reduce:

var numbers = [3, 56, 2, 48, 5];

//Map -Create a new array by doing something with each item in an array.
// The advantage over foreach or for loops is that a map always returns an array
// so it is more concise
function double(x) {
  return x * 2;
}

const newNums = numbers.map(double);

const altNums = numbers.map(function (x) {
  return x * 2;
});
console.log(newNums, altNums);

//Filter - Create a new array by keeping the items that return true.
const numGreaterThanTen = numbers.filter(function (num) {
  return num > 10;
});

console.log(numGreaterThanTen);

//Reduce - Accumulate a value by doing something to each item in an array.
const sum = numbers.reduce(function (accumulator, current) {
  return (accumulator += current);
});

console.log(sum);

//Find - find the first item that matches from an array.
const foundNumGreaterThanTen = numbers.find(function (num) {
  return num > 10;
});

console.log(foundNumGreaterThanTen);

//FindIndex - find the index of the first item that matches.
const foundIndexOfFirstGreaterThanTen = numbers.findIndex(function (num) {
  return num > 10;
});

console.log(foundIndexOfFirstGreaterThanTen);

import emojipedia from "./emojipedia";

const truncDefinition = emojipedia.map( function (emojiTerm) {
  return emojiTerm.meaning.substr(0, 100);
});

console.log(truncDefinition);

A whole new world of Anon functions
Instead of using a callback function that is anonymous by saying function we can simply use the arrow function.
So basically if I take the emojipedia example you can update it to the following:

import emojipedia from "./emojipedia";

const truncDefinition = emojipedia.map((emojiTerm) => {
  return emojiTerm.meaning.substr(0, 100);
});

const square = numbers.map( x => x * x);

console.log(truncDefinition);

To optionally render we can use a ternary operator within the JSX

For example to show something if we are logged in we could do the following
It follows the form: condition ? true return : false return

{isLoggedIn ? <h1>Hello</h1> : <Login />

You can also use the && do do something similiar if you don't want something to happen in a false case:
{currentTime.getHours() > 12 ? <h1>Why are you still working?</h1> : null}

would become the following because the first statment is true the second will be executed. If it is false
the if statement will be short circuited 
{currentTime.getHours() > 12 && <h1>Why are you still working?</h1>}


More Examples:
<form className="form">
  <input type="text" placeholder="Username" />
  <input type="password" placeholder="Password" />
  {props.isNotRegistered && (
    <input type="password" placeholder="Confirm Password" />
  )}
  <button type="submit">
    {props.isNotRegistered ? "Register" : "Login"}
  </button>
</form>


Declaritive vs Imperative

In JavaScript there are two main ways of designing code:
Declaritive in which you render components by using inbuilt variables and are told to render based on that variable
Imperative in which you use functions and built out methods (document model) to render what you need

Please refer to  https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2 as my definition is not as clear

This becomes an issue as you start to need to rerender websites for instance in the example below I am simply wanting to
increase the counter when the button is pressed. So you might do the following 

let count = 0;

function increase() {
  count++;
}

ReactDOM.render(
  <div className="container">
    <h1>{count}</h1>
    <button onClick={increase}>+</button>
  </div>,
  document.getElementById("root")
);

However this will not work as you are only rendering the page once. Technically you could call ReactDOM.render again
but it will add a lot of extra bloat to your server.

To solve this we can use Hooks 


import React, { useState } from "react";

function App() {
  // Use state method takes two parameters the initialValue and the function to update the value
  const [count, setCount] = useState(0);
  // console.log(count);

  function increase() {
    // Dont ever do this if you are using state
    // You must update with a hook
    // count++;
    // console.log(count);

    setCount(count + 1);
  }

  function decrease() {
    setCount(count - 1);
  }
  return (
    <div className="container">
      <h1>{count}</h1>
      <button onClick={increase}>+</button>
      <button onClick={decrease}>-</button>
    </div>
  );
}

export default App;

Another Example:

function App() {
  const [time, setTime] = useState("Time");

  function updateTime() {
    let current = new Date().toLocaleTimeString("en-US", {
      hour12: false,
      hour: "numeric",
      minute: "numeric",
      second: "numeric"
    });
    setTime(current);
  }

  function autoUpdate() {
    setInterval(updateTime, 1000);
  }
  return (
    <div className="container">
      <h1>{time}</h1>
      <button onClick={updateTime}>Get Time</button>
      <button onClick={autoUpdate}>Set Auto Update</button>
    </div>
  );
}


Destructuring

You can map the variables to destructure 
const [red, green, blue] = [9, 123, 227]
console.log(red, green, blue);

Example of Destructuring

const cars = [
  {
    model: "Honda Civic",
    //The top colour refers to the first item in the array below:
    //i.e. hondaTopColour = "black"
    coloursByPopularity: ["black", "silver"],
    speedStats: {
      topSpeed: 140,
      zeroToSixty: 8.5
    }
  },
  {
    model: "Tesla Model 3",
    coloursByPopularity: ["red", "white"],
    speedStats: {
      topSpeed: 150,
      zeroToSixty: 3.2
    }
  }
];

export default cars;


console.log(cars);

const [honda, tesla] = cars;

const {
  coloursByPopularity: [teslaTopColour],
  speedStats: { topSpeed: teslaTopSpeed }
} = tesla;

const {
  coloursByPopularity: [hondaTopColour],
  speedStats: { topSpeed: hondaTopSpeed }
} = honda;

ReactDOM.render(
  <table>
    <tr>
      <th>Brand</th>
      <th>Top Speed</th>
    </tr>
    <tr>
      <td>{tesla.model}</td>
      <td>{teslaTopSpeed}</td>
      <td>{teslaTopColour}</td>
    </tr>
    <tr>
      <td>{honda.model}</td>
      <td>{hondaTopSpeed}</td>
      <td>{hondaTopColour}</td>
    </tr>
  </table>,
  document.getElementById("root")
);

Event Handling

handleMouseOver / handleMouseOut events (they have camel casing instead of regular styling)

function App() {
  const [introText, setIntro] = useState("Hello");
  const [ourStyle, setStyle] = useState({ backgroundColor: "white" });

  function handleMouseOver() {
    setStyle({ backgroundColor: "black" });
  }

  function handleMouseOut() {
    setStyle({ backgroundColor: "white" });
  }

  return (
    <div className="container">
      <h1>{introText}</h1>
      <input type="text" placeholder="What's your name?" />
      <button
        onMouseOver={handleMouseOver}
        onMouseOut={handleMouseOut}
        style={ourStyle}
      >
        {" "}
        Submit
      </button>
    </div>
  );
}

Alternate version where you can use ternary conditioning statements

function App() {
  const [introText, setIntro] = useState("Hello");
  const [isMousedOver, setMousedOver] = useState(false);

  function handleMouseOver() {
    setMousedOver(true);
  }

  function handleMouseOut() {
    setMousedOver(false);
  }

  return (
    <div className="container">
      <h1>{introText}</h1>
      <input type="text" placeholder="What's your name?" />
      <button
        onMouseOver={handleMouseOver}
        onMouseOut={handleMouseOut}
        style={{ backgroundColor: isMousedOver ? "black" : "white" }}
      >
        {" "}
        Submit
      </button>
    </div>
  );
}

Forms


In order to have valid forms that have dynamic data we can use events and state.

function App() {
  const [name, setName] = useState("");

  function handleChange(event) {
    console.log(event.target.value);
    console.log(event.target.placeholder);
    console.log(event.target.type);
    setName(event.target.value);
  }
  return (
    <div className="container">
      <h1>Hello {name}</h1>
      <input
        onChange={handleChange}
        type="text"
        placeholder="What's your name?"
        value={name}
      />
      <button>Submit</button>
    </div>
  );
}

The above form is using the value field as the state value so that the value is considerd a controlled component.
Please view the below link for more info. Basically it means that there is a single source of truth since the state
and value are being updated at the same time to keep consistency.

https://reactjs.org/docs/forms.html#controlled-components

Please note that if you are trying to make a form you will normally have a submit button (type=sumbit) which
can have the onSubmit event for you to pass in a new form. However in react this will cause the page to refresh.
This is not what we want with single page apps so you use event.preventDefault() to stop the refresh.